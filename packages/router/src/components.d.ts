/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';

import '@stencil/state-tunnel';


import {
  HistoryType,
  LocationSegments,
  MatchResults,
  RouterHistory,
  RouteViewOptions,
} from './global/interfaces';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface StencilAsyncContent {
      'documentLocation': string;
    }

    interface StencilRouterRedirect {
      'history': RouterHistory;
      'root': string;
      'url': string;
    }

    interface StencilRouteLink {
      'activeClass': string;
      'anchorClass': string;
      'anchorRole': string;
      'anchorTabIndex': string;
      'anchorTitle': string;
      'ariaHaspopup': string;
      'ariaLabel': string;
      'ariaPosinset': string;
      'ariaSetsize': number;
      /**
       * Custom tag to use instead of an anchor
       */
      'custom': string;
      'exact': boolean;
      'history': RouterHistory;
      'id': string;
      'location': LocationSegments;
      'root': string;
      'strict': boolean;
      'url': string;
      'urlMatch': string | string[];
    }

    interface StencilRouteTitle {
      'title': string;
      'titleSuffix': string;
    }

    interface StencilRoute {
      'component': string;
      'componentProps': { [key: string]: any };
      'componentUpdated': (options: RouteViewOptions) => void;
      'exact': boolean;
      'group': string | null;
      'groupMatch': MatchResults | null;
      'history': RouterHistory;
      'historyType': HistoryType;
      'location': LocationSegments;
      'routeRender': Function;
      'routeViewsUpdated': (options: RouteViewOptions) => void;
      'scrollTopOffset': number;
      'url': string | string[];
    }

    interface StencilRouter {
      'historyType': HistoryType;
      'root': string;
      'scrollTopOffset': number;
      'titleSuffix': string;
    }

    interface StencilRouteSwitch {
      'group': string;
      'location': LocationSegments;
      'routeViewsUpdated': (options: RouteViewOptions) => void;
      'scrollTopOffset': number;
    }
  }


    interface HTMLStencilAsyncContentElement extends StencilComponents.StencilAsyncContent, HTMLStencilElement {}

    var HTMLStencilAsyncContentElement: {
      prototype: HTMLStencilAsyncContentElement;
      new (): HTMLStencilAsyncContentElement;
    };
    

    interface HTMLStencilRouterRedirectElement extends StencilComponents.StencilRouterRedirect, HTMLStencilElement {}

    var HTMLStencilRouterRedirectElement: {
      prototype: HTMLStencilRouterRedirectElement;
      new (): HTMLStencilRouterRedirectElement;
    };
    

    interface HTMLStencilRouteLinkElement extends StencilComponents.StencilRouteLink, HTMLStencilElement {}

    var HTMLStencilRouteLinkElement: {
      prototype: HTMLStencilRouteLinkElement;
      new (): HTMLStencilRouteLinkElement;
    };
    

    interface HTMLStencilRouteTitleElement extends StencilComponents.StencilRouteTitle, HTMLStencilElement {}

    var HTMLStencilRouteTitleElement: {
      prototype: HTMLStencilRouteTitleElement;
      new (): HTMLStencilRouteTitleElement;
    };
    

    interface HTMLStencilRouteElement extends StencilComponents.StencilRoute, HTMLStencilElement {}

    var HTMLStencilRouteElement: {
      prototype: HTMLStencilRouteElement;
      new (): HTMLStencilRouteElement;
    };
    

    interface HTMLStencilRouterElement extends StencilComponents.StencilRouter, HTMLStencilElement {}

    var HTMLStencilRouterElement: {
      prototype: HTMLStencilRouterElement;
      new (): HTMLStencilRouterElement;
    };
    

    interface HTMLStencilRouteSwitchElement extends StencilComponents.StencilRouteSwitch, HTMLStencilElement {}

    var HTMLStencilRouteSwitchElement: {
      prototype: HTMLStencilRouteSwitchElement;
      new (): HTMLStencilRouteSwitchElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'stencil-async-content': JSXElements.StencilAsyncContentAttributes;
    'stencil-router-redirect': JSXElements.StencilRouterRedirectAttributes;
    'stencil-route-link': JSXElements.StencilRouteLinkAttributes;
    'stencil-route-title': JSXElements.StencilRouteTitleAttributes;
    'stencil-route': JSXElements.StencilRouteAttributes;
    'stencil-router': JSXElements.StencilRouterAttributes;
    'stencil-route-switch': JSXElements.StencilRouteSwitchAttributes;
    }
  }

  namespace JSXElements {

    export interface StencilAsyncContentAttributes extends HTMLAttributes {
      'documentLocation'?: string;
    }

    export interface StencilRouterRedirectAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
      'root'?: string;
      'url'?: string;
    }

    export interface StencilRouteLinkAttributes extends HTMLAttributes {
      'activeClass'?: string;
      'anchorClass'?: string;
      'anchorRole'?: string;
      'anchorTabIndex'?: string;
      'anchorTitle'?: string;
      'ariaHaspopup'?: string;
      'ariaLabel'?: string;
      'ariaPosinset'?: string;
      'ariaSetsize'?: number;
      /**
       * Custom tag to use instead of an anchor
       */
      'custom'?: string;
      'exact'?: boolean;
      'history'?: RouterHistory;
      'id'?: string;
      'location'?: LocationSegments;
      'root'?: string;
      'strict'?: boolean;
      'url'?: string;
      'urlMatch'?: string | string[];
    }

    export interface StencilRouteTitleAttributes extends HTMLAttributes {
      'title'?: string;
      'titleSuffix'?: string;
    }

    export interface StencilRouteAttributes extends HTMLAttributes {
      'component'?: string;
      'componentProps'?: { [key: string]: any };
      'componentUpdated'?: (options: RouteViewOptions) => void;
      'exact'?: boolean;
      'group'?: string | null;
      'groupMatch'?: MatchResults | null;
      'history'?: RouterHistory;
      'historyType'?: HistoryType;
      'location'?: LocationSegments;
      'routeRender'?: Function;
      'routeViewsUpdated'?: (options: RouteViewOptions) => void;
      'scrollTopOffset'?: number;
      'url'?: string | string[];
    }

    export interface StencilRouterAttributes extends HTMLAttributes {
      'historyType'?: HistoryType;
      'root'?: string;
      'scrollTopOffset'?: number;
      'titleSuffix'?: string;
    }

    export interface StencilRouteSwitchAttributes extends HTMLAttributes {
      'group'?: string;
      'location'?: LocationSegments;
      'routeViewsUpdated'?: (options: RouteViewOptions) => void;
      'scrollTopOffset'?: number;
    }
  }

  interface HTMLElementTagNameMap {
    'stencil-async-content': HTMLStencilAsyncContentElement
    'stencil-router-redirect': HTMLStencilRouterRedirectElement
    'stencil-route-link': HTMLStencilRouteLinkElement
    'stencil-route-title': HTMLStencilRouteTitleElement
    'stencil-route': HTMLStencilRouteElement
    'stencil-router': HTMLStencilRouterElement
    'stencil-route-switch': HTMLStencilRouteSwitchElement
  }

  interface ElementTagNameMap {
    'stencil-async-content': HTMLStencilAsyncContentElement;
    'stencil-router-redirect': HTMLStencilRouterRedirectElement;
    'stencil-route-link': HTMLStencilRouteLinkElement;
    'stencil-route-title': HTMLStencilRouteTitleElement;
    'stencil-route': HTMLStencilRouteElement;
    'stencil-router': HTMLStencilRouterElement;
    'stencil-route-switch': HTMLStencilRouteSwitchElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;